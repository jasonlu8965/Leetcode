/*
121. Best Time to Buy and Sell Stock

Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.
*/

/*
思路
1）动态规划，在第i天之前最低点买入，然后在第i天之后的最高点卖出，就能获得在第i天前买入的最佳收益
*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxP,min,max;
        int len =prices.size();
        if(len<2) return 0;
        min = prices[0];
        max = maxPrice(prices,1);
        maxP =max-min;
        for(int i =1;i!=len-1;i++)
        {
            if(prices[i]<min)
            min=prices[i];
            if(prices[i]==max)//这里要遍历后面所有元素，如果是逆序的话，最坏情况时间复杂度是N2
            max=maxPrice(prices,i+1);
            if(max-min>maxP)
            maxP=max-min;
        }
        return maxP;
    }
    int maxPrice(vector<int>& prices,int begin)
    {
        int len=prices.size();
        int max=prices[begin];
        for(int i=begin;i!=len;i++)
        {
            if(prices[i]>max)
            max=prices[i];
        }
        return max;
    }
};
//如上O（N2）的方式会在逆序的时候超时，如果先进行一次排序，则时间复杂度变为NlogN